// Code generated by sqlc. DO NOT EDIT.
// source: position_attribute.sql

package sqlc

import (
	"context"
)

const createPositionAttribute = `-- name: CreatePositionAttribute :one
INSERT INTO position_attributes (
        id, 
        attribute_id, 
        position_id, 
        value
    )
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreatePositionAttributeParams struct {
	ID          string `json:"id"`
	AttributeID string `json:"attribute_id"`
	PositionID  string `json:"position_id"`
	Value       string `json:"value"`
}

func (q *Queries) CreatePositionAttribute(ctx context.Context, arg CreatePositionAttributeParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createPositionAttribute,
		arg.ID,
		arg.AttributeID,
		arg.PositionID,
		arg.Value,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deletePositionAttribute = `-- name: DeletePositionAttribute :exec
DELETE
FROM position_attributes
WHERE position_id = $1
`

func (q *Queries) DeletePositionAttribute(ctx context.Context, positionID string) error {
	_, err := q.db.ExecContext(ctx, deletePositionAttribute, positionID)
	return err
}

const getPositionAttribute = `-- name: GetPositionAttribute :one
SELECT id, attribute_id, position_id, value
FROM position_attributes
WHERE id = $1
`

func (q *Queries) GetPositionAttribute(ctx context.Context, id string) (PositionAttribute, error) {
	row := q.db.QueryRowContext(ctx, getPositionAttribute, id)
	var i PositionAttribute
	err := row.Scan(
		&i.ID,
		&i.AttributeID,
		&i.PositionID,
		&i.Value,
	)
	return i, err
}

const getPositionAttributes = `-- name: GetPositionAttributes :many
SELECT 
    pa.id,
    pa.attribute_id,
    pa.position_id,
    pa.value,
    a.name as attribute_name,
    a.type as attribute_type
FROM position_attributes pa
JOIN attribute a ON pa.attribute_id = a.id
WHERE position_id = $1
`

type GetPositionAttributesRow struct {
	ID            string         `json:"id"`
	AttributeID   string         `json:"attribute_id"`
	PositionID    string         `json:"position_id"`
	Value         string         `json:"value"`
	AttributeName string         `json:"attribute_name"`
	AttributeType AttributeTypes `json:"attribute_type"`
}

func (q *Queries) GetPositionAttributes(ctx context.Context, positionID string) ([]GetPositionAttributesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPositionAttributes, positionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPositionAttributesRow
	for rows.Next() {
		var i GetPositionAttributesRow
		if err := rows.Scan(
			&i.ID,
			&i.AttributeID,
			&i.PositionID,
			&i.Value,
			&i.AttributeName,
			&i.AttributeType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePositionAttribute = `-- name: UpdatePositionAttribute :exec
UPDATE position_attributes
SET 
    attribute_id = $1,
    position_id  = $2,
    value        = $3
WHERE id = $4
`

type UpdatePositionAttributeParams struct {
	AttributeID string `json:"attribute_id"`
	PositionID  string `json:"position_id"`
	Value       string `json:"value"`
	ID          string `json:"id"`
}

func (q *Queries) UpdatePositionAttribute(ctx context.Context, arg UpdatePositionAttributeParams) error {
	_, err := q.db.ExecContext(ctx, updatePositionAttribute,
		arg.AttributeID,
		arg.PositionID,
		arg.Value,
		arg.ID,
	)
	return err
}
