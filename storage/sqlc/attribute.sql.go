// Code generated by sqlc. DO NOT EDIT.
// source: attribute.sql

package sqlc

import (
	"context"
)

const createAttribute = `-- name: CreateAttribute :one
INSERT INTO attribute (
        id, 
        name, 
        type
    )
VALUES ($1, $2, $3)
RETURNING id
`

type CreateAttributeParams struct {
	ID   string         `json:"id"`
	Name string         `json:"name"`
	Type AttributeTypes `json:"type"`
}

func (q *Queries) CreateAttribute(ctx context.Context, arg CreateAttributeParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createAttribute, arg.ID, arg.Name, arg.Type)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteAttribute = `-- name: DeleteAttribute :exec
DELETE
FROM attribute
WHERE id = $1
`

func (q *Queries) DeleteAttribute(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAttribute, id)
	return err
}

const getAttribute = `-- name: GetAttribute :one
SELECT id, name, type
FROM attribute
WHERE id = $1
`

func (q *Queries) GetAttribute(ctx context.Context, id string) (Attribute, error) {
	row := q.db.QueryRowContext(ctx, getAttribute, id)
	var i Attribute
	err := row.Scan(&i.ID, &i.Name, &i.Type)
	return i, err
}

const getAttributes = `-- name: GetAttributes :many
SELECT id, name, type
FROM attribute
WHERE name ilike '%' || $1::varchar || '%'
offset $2 limit $3
`

type GetAttributesParams struct {
	Search string `json:"search"`
	Offset int32  `json:"offset_"`
	Limit  int32  `json:"limit_"`
}

func (q *Queries) GetAttributes(ctx context.Context, arg GetAttributesParams) ([]Attribute, error) {
	rows, err := q.db.QueryContext(ctx, getAttributes, arg.Search, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Attribute
	for rows.Next() {
		var i Attribute
		if err := rows.Scan(&i.ID, &i.Name, &i.Type); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAttributesCount = `-- name: GetAttributesCount :one
SELECT count(1)
FROM attribute
WHERE name ilike '%' || $1::varchar || '%'
`

func (q *Queries) GetAttributesCount(ctx context.Context, search string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAttributesCount, search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateAttribute = `-- name: UpdateAttribute :exec
UPDATE attribute
SET name = $1,
    type = $2
WHERE id = $3
`

type UpdateAttributeParams struct {
	Name string         `json:"name"`
	Type AttributeTypes `json:"type"`
	ID   string         `json:"id"`
}

func (q *Queries) UpdateAttribute(ctx context.Context, arg UpdateAttributeParams) error {
	_, err := q.db.ExecContext(ctx, updateAttribute, arg.Name, arg.Type, arg.ID)
	return err
}
