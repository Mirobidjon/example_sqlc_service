// Code generated by sqlc. DO NOT EDIT.
// source: profession.sql

package sqlc

import (
	"context"
)

const createProfession = `-- name: CreateProfession :one
INSERT INTO profession(
        id, 
        name,
        description
    )
VALUES ($1, $2, $3)
RETURNING id
`

type CreateProfessionParams struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) CreateProfession(ctx context.Context, arg CreateProfessionParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createProfession, arg.ID, arg.Name, arg.Description)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteProfession = `-- name: DeleteProfession :exec
DELETE
FROM profession
WHERE id = $1
`

func (q *Queries) DeleteProfession(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProfession, id)
	return err
}

const getProfession = `-- name: GetProfession :one
SELECT id, name, description
FROM profession
WHERE id = $1
`

func (q *Queries) GetProfession(ctx context.Context, id string) (Profession, error) {
	row := q.db.QueryRowContext(ctx, getProfession, id)
	var i Profession
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getProfessions = `-- name: GetProfessions :many
SELECT 
    id,
    name,
    description
FROM profession
WHERE name ilike '%' || $1::varchar || '%' 
offset $2::integer limit $3::integer
`

type GetProfessionsParams struct {
	Search string `json:"search"`
	Offset int32  `json:"offset_"`
	Limit  int32  `json:"limit_"`
}

func (q *Queries) GetProfessions(ctx context.Context, arg GetProfessionsParams) ([]Profession, error) {
	rows, err := q.db.QueryContext(ctx, getProfessions, arg.Search, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Profession
	for rows.Next() {
		var i Profession
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProfessionsCount = `-- name: GetProfessionsCount :one
SELECT count(1)
FROM profession
WHERE name ilike '%' || $1::varchar || '%'
`

func (q *Queries) GetProfessionsCount(ctx context.Context, search string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getProfessionsCount, search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateProfession = `-- name: UpdateProfession :exec
UPDATE profession
SET name = $1,
    description = $2
WHERE id = $3
`

type UpdateProfessionParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	ID          string  `json:"id"`
}

func (q *Queries) UpdateProfession(ctx context.Context, arg UpdateProfessionParams) error {
	_, err := q.db.ExecContext(ctx, updateProfession, arg.Name, arg.Description, arg.ID)
	return err
}
